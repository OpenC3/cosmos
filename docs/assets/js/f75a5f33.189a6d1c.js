"use strict";(self.webpackChunkdocs_openc3_com=self.webpackChunkdocs_openc3_com||[]).push([["3956"],{8618:function(e,s,t){t.r(s),t.d(s,{frontMatter:()=>a,toc:()=>c,default:()=>d,metadata:()=>i,assets:()=>l,contentTitle:()=>r});var i=JSON.parse('{"id":"configuration/limits-response","title":"Limits Response","description":"Custom code invoked when a item with limits changes state","source":"@site/docs/configuration/limits-response.md","sourceDirName":"configuration","slug":"/configuration/limits-response","permalink":"/docs/configuration/limits-response","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenC3/cosmos/tree/main/docs.openc3.com/docs/configuration/limits-response.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"title":"Limits Response","description":"Custom code invoked when a item with limits changes state","sidebar_custom_props":{"myEmoji":"\u26A0\uFE0F"}},"sidebar":"defaultSidebar","previous":{"title":"Processors","permalink":"/docs/configuration/processors"},"next":{"title":"Tables","permalink":"/docs/configuration/table"}}'),n=t(5813),o=t(8207);let a={sidebar_position:11,title:"Limits Response",description:"Custom code invoked when a item with limits changes state",sidebar_custom_props:{myEmoji:"\u26A0\uFE0F"}},r="Overview",l={},c=[{value:"Creating a Limits Response",id:"creating-a-limits-response",level:2},{value:"call",id:"call",level:3},{value:"Apply Conversion",id:"apply-conversion",level:3}];function m(e){let s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"overview",children:"Overview"})}),"\n",(0,n.jsxs)(s.p,{children:["A limits response is custom code which can respond to a telemetry item changing limits states (red, yellow, green or blue). To apply a limits response to a telemetry item you use the ",(0,n.jsx)(s.a,{href:"/docs/configuration/telemetry#limits_response",children:"LIMITS_RESPONSE"})," keyword."]}),"\n",(0,n.jsx)(s.h2,{id:"creating-a-limits-response",children:"Creating a Limits Response"}),"\n",(0,n.jsxs)(s.p,{children:["You can easily create a limits response by using the ",(0,n.jsx)(s.a,{href:"/docs/getting-started/generators#limits-response-generator",children:"Limits Response Code Generator"}),". To generate a limits response you must be inside an existing COSMOS plugin. The generator takes both a target name and the limits response name. For example if your plugin is called ",(0,n.jsx)(s.code,{children:"openc3-cosmos-gse"})," and you have an existing target named ",(0,n.jsx)(s.code,{children:"GSE"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"openc3-cosmos-gse % openc3.sh cli generate limits_response GSE abort --python\nLimits response targets/GSE/lib/abort_limits_response.py successfully generated!\nTo use the limits response add the following to a telemetry item:\n  LIMITS_RESPONSE abort_limits_response.py\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Note: To create a Ruby conversion simply replace ",(0,n.jsx)(s.code,{children:"--python"})," with ",(0,n.jsx)(s.code,{children:"--ruby"})]}),"\n",(0,n.jsxs)(s.p,{children:["This creates a limits response called ",(0,n.jsx)(s.code,{children:"abort_limits_response.py"})," at ",(0,n.jsx)(s.code,{children:"targets/GSE/lib/abort_limits_response.py"}),". The code which is generated looks like the following:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'from openc3.packets.limits_response import LimitsResponse\nfrom openc3.api import *\n\nclass AbortLimitsResponse(LimitsResponse):\n    # @param packet [Packet] Packet the limits response is assigned to\n    # @param item [PacketItem] PacketItem the limits response is assigned to\n    # @param old_limits_state [Symbol] Previous value of the limit. One of nil,\n    #   "GREEN_HIGH", "GREEN_LOW", "YELLOW", "YELLOW_HIGH", "YELLOW_LOW",\n    #   "RED", "RED_HIGH", "RED_LOW". nil if the previous limit state has not yet\n    #   been established.\n    def call(self, packet, item, old_limits_state):\n        # Take action based on the current limits state\n        # Delete any of the case lines that do not apply or you don\'t care about\n        match item.limits.state:\n            case "RED_HIGH":\n                # Take action like sending a command:\n                # cmd("TARGET SAFE")\n                pass\n            case "RED_LOW":\n                pass\n            case "YELLOW_LOW":\n                pass\n            case "YELLOW_HIGH":\n                pass\n            # GREEN limits are only available if a telemetry item has them defined\n            # COSMOS refers to these as "operational limits"\n            # See https://docs.openc3.com/docs/configuration/telemetry#limits\n            case "GREEN_LOW":\n                pass\n            case "GREEN_HIGH":\n                pass\n            # :RED and :YELLOW limits are triggered for STATES with defined RED and YELLOW states\n            # See https://docs.openc3.com/docs/configuration/telemetry#state\n            case "RED":\n                pass\n            case "YELLOW":\n                pass\n'})}),"\n",(0,n.jsxs)(s.p,{children:["There are a lot of comments to help you know what to do. The only thing you need to modify is the ",(0,n.jsx)(s.code,{children:"call"})," method."]}),"\n",(0,n.jsx)(s.h3,{id:"call",children:"call"}),"\n",(0,n.jsxs)(s.p,{children:["The call method is where the limits response logic is implemented. As an example, suppose we want to send the ",(0,n.jsx)(s.code,{children:"INST ABORT"})," command every time we enter a RED_HIGH or RED_LOW state. The final result with comments removed looks like the following:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'from openc3.packets.limits_response import LimitsResponse\nfrom openc3.api import *\nclass AbortLimitsResponse(LimitsResponse):\n    def call(self, packet, item, old_limits_state):\n        match item.limits.state:\n            case "RED_HIGH" | "RED_LOW":\n                cmd("INST ABORT")\n'})}),"\n",(0,n.jsx)(s.h3,{id:"apply-conversion",children:"Apply Conversion"}),"\n",(0,n.jsxs)(s.p,{children:["Now that we have implemented the limits response logic we need to apply it to a telemetry item by adding the line ",(0,n.jsx)(s.code,{children:"LIMITS_RESPONSE abort_limits_response.py"})," in the ",(0,n.jsx)(s.a,{href:"/docs/configuration/telemetry",children:"telemetry"})," definition file. This could look something like this:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:'TELEMETRY GSE DATA BIG_ENDIAN "Data packet"\n  ... # Header items\n  APPEND_ITEM VALUE 16 UINT "limits response item"\n    LIMITS DEFAULT 1 ENABLED -90 -80 80 90\n    LIMITS_RESPONSE abort_limits_response.py\n'})}),"\n",(0,n.jsxs)(s.p,{children:["The definition combined with the ",(0,n.jsx)(s.code,{children:"AbortLimitsResponse"})," means that each time the ",(0,n.jsx)(s.code,{children:"GSE DATA VALUE"})," item goes below -90 or above 90 the ",(0,n.jsx)(s.code,{children:"INST ABORT"})," command will be sent."]})]})}function d(e={}){let{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},8207:function(e,s,t){t.d(s,{R:()=>a,x:()=>r});var i=t(9729);let n={},o=i.createContext(n);function a(e){let s=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(o.Provider,{value:s},e.children)}}}]);