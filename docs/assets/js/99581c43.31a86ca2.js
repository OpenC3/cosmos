"use strict";(self.webpackChunkdocs_openc3_com=self.webpackChunkdocs_openc3_com||[]).push([["6526"],{4642:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>o,toc:()=>c,default:()=>a,metadata:()=>t,assets:()=>l,contentTitle:()=>d});var t=JSON.parse('{"id":"guides/custom-widgets","title":"Custom Widgets","description":"How to build custom widgets for use in Telemetry Viewer","source":"@site/docs/guides/custom-widgets.md","sourceDirName":"guides","slug":"/guides/custom-widgets","permalink":"/docs/guides/custom-widgets","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenC3/cosmos/tree/main/docs.openc3.com/docs/guides/custom-widgets.md","tags":[],"version":"current","frontMatter":{"title":"Custom Widgets","description":"How to build custom widgets for use in Telemetry Viewer","sidebar_custom_props":{"myEmoji":"\u{1F528}"}},"sidebar":"defaultSidebar","previous":{"title":"COSMOS and NASA cFS","permalink":"/docs/guides/cfs"},"next":{"title":"Dynamic Packets","permalink":"/docs/guides/dynamic-packets"}}'),s=i(5813),r=i(8207);let o={title:"Custom Widgets",description:"How to build custom widgets for use in Telemetry Viewer",sidebar_custom_props:{myEmoji:"\u{1F528}"}},d="Custom Widgets",l={},c=[{value:"Step 1: Set Up Your Plugin Structure",id:"step-1-set-up-your-plugin-structure",level:2},{value:"Step 2: Declare Your Widget in plugin.txt",id:"step-2-declare-your-widget-in-plugintxt",level:2},{value:"Step 3: Configure Your Build Process",id:"step-3-configure-your-build-process",level:2},{value:"Set Up package.json",id:"set-up-packagejson",level:3},{value:"Update Your Rakefile",id:"update-your-rakefile",level:3},{value:"Step 4: Create Your Widget Component",id:"step-4-create-your-widget-component",level:2},{value:"Step 5: Develop Your Widget",id:"step-5-develop-your-widget",level:2},{value:"Designing Your Widget Layout",id:"designing-your-widget-layout",level:3},{value:"Adding Widget Logic",id:"adding-widget-logic",level:3},{value:"Styling Your Widget",id:"styling-your-widget",level:3},{value:"Step 6: Configure Your Build Output",id:"step-6-configure-your-build-output",level:2},{value:"Step 7: Use Your Widget in a Screen Definition",id:"step-7-use-your-widget-in-a-screen-definition",level:2},{value:"Step 8: Build and Deploy Your Plugin",id:"step-8-build-and-deploy-your-plugin",level:2}];function u(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{TabItem:t,Tabs:o}=n;return t||g("TabItem",!0),o||g("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"custom-widgets",children:"Custom Widgets"})}),"\n",(0,s.jsxs)(n.p,{children:["This guide will walk you through the process of building custom widgets for use in COSMOS ",(0,s.jsx)(n.a,{href:"/docs/tools/tlm-viewer",children:"Telemetry Viewer"}),". While you can use any JavaScript framework, we'll use Vue.js since COSMOS is built with it. Before starting, you may want to check out the ",(0,s.jsx)(n.a,{href:"/docs/getting-started/generators#widget-generator",children:"Widget Generator"})," guide to create the initial scaffolding."]}),"\n",(0,s.jsx)(n.h2,{id:"step-1-set-up-your-plugin-structure",children:"Step 1: Set Up Your Plugin Structure"}),"\n",(0,s.jsxs)(n.p,{children:["If you have an existing plugin, start in the root directory for that plugin. If you do not yet have a plugin, start by using the ",(0,s.jsx)(n.a,{href:"/docs/getting-started/generators#plugin-generator",children:"Plugin Generator"})," to create one."]}),"\n",(0,s.jsx)(n.admonition,{title:"Use separate plugins for tools and widgets",type:"warning",children:(0,s.jsx)(n.p,{children:"If your existing plugin contains a custom tool, you may run into build issues. In this instance, we recommend having one plugin for your custom tool, and a second plugin for you custom custom widgets."})}),"\n",(0,s.jsxs)(n.p,{children:["In your plugin's root directory, use the ",(0,s.jsx)(n.a,{href:"/docs/getting-started/generators#widget-generator",children:"Widget Generator"})," to scaffold the widget."]}),"\n",(0,s.jsx)(n.p,{children:"Ensure your plugin has the correct directory structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"your-plugin/\n\u251C\u2500\u2500 LICENSE.txt\n\u251C\u2500\u2500 your-plugin.gemspec\n\u251C\u2500\u2500 package.json\n\u251C\u2500\u2500 plugin.txt\n\u251C\u2500\u2500 Rakefile\n\u251C\u2500\u2500 README.md\n\u251C\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 YourcustomWidget.vue\n\u2514\u2500\u2500 vite.config.js\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-2-declare-your-widget-in-plugintxt",children:"Step 2: Declare Your Widget in plugin.txt"}),"\n",(0,s.jsxs)(n.p,{children:["In your plugin's ",(0,s.jsx)(n.code,{children:"plugin.txt"})," file, declare each custom widget you want to create:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"WIDGET YOURCUSTOM\n"})}),"\n",(0,s.jsx)(n.p,{children:"For example, in the COSMOS Demo plugin, two widgets are declared:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"WIDGET BIG\nWIDGET HELLOWORLD\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-3-configure-your-build-process",children:"Step 3: Configure Your Build Process"}),"\n",(0,s.jsx)(n.h3,{id:"set-up-packagejson",children:"Set Up package.json"}),"\n",(0,s.jsxs)(n.p,{children:["Ensure your ",(0,s.jsx)(n.code,{children:"package.json"})," includes the necessary build script:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "build": "vite build"\n  },\n  "dependencies": {\n    "@openc3/vue-common": "latest"\n  },\n  "devDependencies": {\n    "vite": "latest"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"update-your-rakefile",children:"Update Your Rakefile"}),"\n",(0,s.jsxs)(n.p,{children:["Ensure your ",(0,s.jsx)(n.code,{children:"Rakefile"})," is configured to run the build script in its ",(0,s.jsx)(n.code,{children:":build"})," task:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"(This should happen automatically if you use our code generators mentioned above.)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"task :build do\n  # ...\n\n  # Build the widget and gem using sh built into Rake:\n  # https://rubydoc.info/gems/rake/FileUtils#sh-instance_method\n  sh('pnpm', 'run', 'build')\n\n  # ...\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-4-create-your-widget-component",children:"Step 4: Create Your Widget Component"}),"\n",(0,s.jsxs)(n.p,{children:["If it doesn't exist already, create a Vue component file in the ",(0,s.jsx)(n.code,{children:"src"})," directory, following this naming convention: ",(0,s.jsx)(n.code,{children:"YourcustomWidget.vue"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:['For example, to create a widget called "HELLOWORLD", you would create ',(0,s.jsx)(n.code,{children:"HelloworldWidget.vue"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<template>\n  \x3c!-- Your widget\'s HTML structure goes here --\x3e\n</template>\n\n<script>\n  import { Widget } from "@openc3/vue-common/widgets";\n  export default {\n    mixins: [Widget],\n    data() {\n      return {\n        // Reactive data items\n      };\n    },\n  };\n<\/script>\n<style scoped>\n  /* Widget-specific styles */\n</style>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"step-5-develop-your-widget",children:"Step 5: Develop Your Widget"}),"\n",(0,s.jsx)(n.p,{children:"This is where you'll design the actual layout and functionality of your widget. Let's expand on this using the Helloworld Widget as an example:"}),"\n",(0,s.jsx)(n.h3,{id:"designing-your-widget-layout",children:"Designing Your Widget Layout"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"<template>"})," section, you'll define your widget's visual structure. For a simple Hello World widget:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<template>\n  <div class="hello-world-container">\n    <h3>{{ greeting }}</h3>\n    <p>This is a custom COSMOS widget</p>\n    <v-btn @click="updateGreeting" color="primary"> Change Greeting </v-btn>\n  </div>\n</template>\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"Vue & Vuetify",type:"info",children:(0,s.jsxs)(n.p,{children:["For more information about how the COSMOS frontend is built (including all the Widgets) please check out ",(0,s.jsx)(n.a,{href:"https://vuejs.org",children:"Vue.js"})," and ",(0,s.jsx)(n.a,{href:"https://vuetifyjs.com",children:"Vuetify"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"adding-widget-logic",children:"Adding Widget Logic"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"<script>"})," section, define the behavior of your widget:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<script>\n  import { Widget } from "@openc3/vue-common/widgets"; // Make sure you import Widget\n  export default {\n    mixins: [Widget], // Make sure you include Widget in the mixins here\n    data() {\n      return {\n        greeting: "Hello, COSMOS!",\n        greetings: ["Hello, COSMOS!", "Greetings, User!", "Welcome to COSMOS!"],\n      };\n    },\n    methods: {\n      updateGreeting() {\n        // Cycle through different greetings\n        const currentIndex = this.greetings.indexOf(this.greeting);\n        const nextIndex = (currentIndex + 1) % this.greetings.length;\n        this.greeting = this.greetings[nextIndex];\n      },\n    },\n  };\n<\/script>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"styling-your-widget",children:"Styling Your Widget"}),"\n",(0,s.jsxs)(n.p,{children:["Add custom styles in the ",(0,s.jsx)(n.code,{children:"<style>"})," section:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<style scoped>\n  .hello-world-container {\n    padding: 15px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    text-align: center;\n    background-color: #f9f9f9;\n  }\n</style>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-6-configure-your-build-output",children:"Step 6: Configure Your Build Output"}),"\n",(0,s.jsxs)(n.p,{children:["Ensure your ",(0,s.jsx)(n.code,{children:"vite.config.js"})," file is configured to properly build your widgets:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { defineConfig } from "vite";\nimport VitePluginStyleInject from "vite-plugin-style-inject";\nimport vue from "@vitejs/plugin-vue";\n\nconst DEFAULT_EXTENSIONS = [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json"];\n\nexport default defineConfig({\n  build: {\n    outDir: "tools/widgets/YourcustomWidget",\n    emptyOutDir: true,\n    sourcemap: true,\n    lib: {\n      entry: "./src/YourcustomWidget.vue",\n      name: "YourcustomWidget",\n      fileName: (format, entryName) => `${entryName}.${format}.min.js`,\n      formats: ["umd"],\n    },\n    rollupOptions: {\n      external: ["vue", "vuetify"],\n    },\n  },\n  plugins: [vue(), VitePluginStyleInject()],\n  resolve: {\n    extensions: [...DEFAULT_EXTENSIONS, ".vue"], // not recommended but saves us from having to change every SFC import\n  },\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"step-7-use-your-widget-in-a-screen-definition",children:"Step 7: Use Your Widget in a Screen Definition"}),"\n",(0,s.jsx)(n.p,{children:"Create a screen definition file in your target's screens directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"SCREEN AUTO AUTO 0.5\nLABELVALUE <%= target_name %> HEALTH_STATUS CCSDSSEQCNT\nHELLOWORLD\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, we're using the HELLOWORLD widget from the demo, which will result in a screen that looks like this:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Simple Screen",src:i(7543).A+"",width:"681",height:"210"})}),"\n",(0,s.jsxs)(n.p,{children:["The widget name follows the convention from ",(0,s.jsx)(n.code,{children:"plugin.txt"})," file. The screen definition for a screen that has only your custom widget created here, ensure your screen definition looks like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"SCREEN AUTO AUTO 0.5\nYOURCUSTOM\n"})}),"\n",(0,s.jsx)(n.p,{children:"If your widget requires telemetry data, make sure you include the target and telemetry information:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"YOURCUSTOM <%= target_name %> HEALTH_STATUS TEMP1\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-8-build-and-deploy-your-plugin",children:"Step 8: Build and Deploy Your Plugin"}),"\n",(0,s.jsxs)(n.p,{children:["In order to build a widget, a container containing ",(0,s.jsx)(n.code,{children:"node"})," and ",(0,s.jsx)(n.code,{children:"pnpm"})," is necessary."]}),"\n",(0,s.jsxs)(o,{groupId:"operating-system",children:[(0,s.jsx)(t,{value:"linux",label:"Linux / macOS",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"% docker run -it -v `pwd`:/openc3/local:z -w /openc3/local openc3inc/openc3-node sh\n/openc3/local $ pnpm install\n/openc3/local $ rake build\n"})})}),(0,s.jsx)(t,{value:"windows",label:"Windows",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -it -v %cd%:/openc3/local -w /openc3/local openc3inc/openc3-node sh\n/openc3/local $ pnpm install\n/openc3/local $ rake build\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Notes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"openc3-node"})," container is currently missing the ",(0,s.jsx)(n.code,{children:"openc3"})," gem, so the gem validation will fail. This does not impact widget development."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"openc3-node"})," container may need to be run as ",(0,s.jsx)(n.code,{children:"root"})," so that ",(0,s.jsx)(n.code,{children:"pnpm"})," has the permissions to create ",(0,s.jsx)(n.code,{children:"node_modules"})," in the host widget directory."]}),"\n",(0,s.jsxs)(n.li,{children:["If you are behind a firewall/proxy, the ",(0,s.jsx)(n.code,{children:"NODE_EXTRA_CA_CERTS"})," in the container may need to be set for ",(0,s.jsx)(n.code,{children:"pnpm"})," to work. The ",(0,s.jsx)(n.code,{children:"Error: self-signed certificate in certificate chain error"})," signifies the need for this env variable."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now open Telemetry Viewer and select your screen to see your custom widget in action!"}),"\n",(0,s.jsx)(n.p,{children:"While this example is simple, the possibilities with custom widgets are limitless!"})]})}function a(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}function g(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},7543:function(e,n,i){i.d(n,{A:()=>t});let t=i.p+"assets/images/simple_screen-e3de1ad836c0661d73a0ba970f991c64df8ecc7e23f9e944b6508a9a43fbc33c.png"},8207:function(e,n,i){i.d(n,{R:()=>o,x:()=>d});var t=i(9729);let s={},r=t.createContext(s);function o(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);