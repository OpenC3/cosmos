# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

# Reference environment variables: https://docs.github.com/en/actions/reference/environment-variables

name: OpenC3 API Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  RUBYGEMS_URL: https://rubygems.org
  BUNDLE_WITHOUT: development
  OPENC3_REDIS_USERNAME: openc3
  OPENC3_REDIS_PASSWORD: openc3password
  OPENC3_REDIS_HOSTNAME: 127.0.0.1
  OPENC3_REDIS_PORT: 6379
  OPENC3_REDIS_EPHEMERAL_HOSTNAME: 127.0.0.1
  OPENC3_REDIS_EPHEMERAL_PORT: 6380
  OPENC3_SERVICE_PASSWORD: openc3service

jobs:
  cmd-tlm-api:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ["3.1", "3.2"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        env:
          OPENC3_DEVEL: ../openc3
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          working-directory: openc3-cosmos-cmd-tlm-api
      - name: Build OpenC3
        run: bundle install; bundle exec rake build
        working-directory: openc3
        env:
          OPENC3_DEVEL: ${GITHUB_WORKSPACE}/openc3
      - name: Run cmd-tlm-api tests
        run: bundle exec rspec
        working-directory: openc3-cosmos-cmd-tlm-api
        env:
          OPENC3_DEVEL: ../openc3
      - uses: codecov/codecov-action@v5
        with:
          directory: openc3-cosmos-cmd-tlm-api/coverage
          flags: ruby-api # See codecov.yml
          token: ${{ secrets.CODECOV_TOKEN }}

  script-runner-api-ruby:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ["3.1", "3.2"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        env:
          OPENC3_DEVEL: ../openc3
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          working-directory: openc3-cosmos-script-runner-api
      - name: Build OpenC3
        run: bundle install; bundle exec rake build
        working-directory: openc3
      - name: Run script-runner-api tests
        run: bundle exec rspec
        working-directory: openc3-cosmos-script-runner-api
        env:
          OPENC3_DEVEL: ../openc3
      - uses: codecov/codecov-action@v5
        with:
          directory: openc3-cosmos-script-runner-api/coverage
          flags: ruby-api # See codecov.yml
          token: ${{ secrets.CODECOV_TOKEN }}

  script-runner-api-python:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
        working-directory: openc3/python
      - name: Lint with ruff
        run: |
          poetry run ruff check --output-format=github ../../openc3-cosmos-script-runner-api/scripts
        working-directory: openc3/python
      - name: Run unit tests
        run: |
          poetry run coverage run -m pytest ../../openc3-cosmos-script-runner-api/test/
          poetry run coverage xml -i
        working-directory: openc3/python
      - uses: codecov/codecov-action@v5
        with:
          working-directory: openc3/python
          flags: python # See codecov.yml
          token: ${{ secrets.CODECOV_TOKEN }}
